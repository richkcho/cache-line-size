name: Rust

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/**
      - examples/**
      - Cargo.toml
      - src/**
      - tests/**
  pull_request_review:
    types: [submitted] # only run on approved PRs, so when it is submitted
  issue_comment:
    types: [created]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    if: |
      github.event_name == 'push' || 
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved') ||
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/run-ci') && 
        (github.event.comment.author_association == 'COLLABORATOR' || github.event.comment.author_association == 'OWNER')
      )

    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: cargo build --verbose
      - name: Run cargo test
        run: cargo test --verbose
      - name: Compare L3 unified cache line size with Linux
        run: |
          set -euo pipefail

          cargo_output=$(cargo run --quiet --example get-cache-line-size -- l3 unified)
          echo "Rust example output: $cargo_output"
          cargo_value=$(echo "$cargo_output" | grep -oE '[0-9]+' | tail -n1)
          cargo_value=$(echo "$cargo_value" | tr -d '[:space:]')

          if [ -z "$cargo_value" ]; then
            echo "Unable to parse cache line size from Rust example output" >&2
            exit 1
          fi

          linux_value=$(getconf LEVEL3_CACHE_LINESIZE || true)
          linux_value=$(echo "$linux_value" | tr -d '[:space:]')

          if [ -n "$linux_value" ]; then
            :
          else
            sysfs_path="/sys/devices/system/cpu/cpu0/cache/index3/coherency_line_size"
            if [ -r "$sysfs_path" ]; then
              linux_value=$(cat "$sysfs_path")
            fi
          fi

          if [ -z "$linux_value" ]; then
            echo "Unable to retrieve L3 unified cache line size from Linux" >&2
            exit 1
          fi

          linux_value=$(echo "$linux_value" | tr -d '[:space:]')

          echo "Linux reported cache line size: $linux_value"

          if [ "$cargo_value" -ne "$linux_value" ]; then
            echo "Mismatch between Rust example and Linux-reported cache line size" >&2
            echo "Rust example: $cargo_value" >&2
            echo "Linux reported: $linux_value" >&2
            exit 1
          fi

          echo "Cache line size matches between Rust example and Linux"
